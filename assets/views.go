// Code generated by go-bindata.
// sources:
// assets/add.html
// assets/footer.html
// assets/header.html
// assets/index.html
// assets/view.html
// assets/views.go
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAddHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\x41\x8b\xd6\x40\x0c\x86\xef\xfe\x8a\x90\x7b\xed\x1f\x98\x0e\xb8\x28\x22\x78\x52\x3c\x4b\xfa\x25\xb5\x83\xed\x64\x48\xd3\x75\x97\xa1\xff\x5d\xda\xed\x7e\xbb\x2a\x0a\xb2\xb7\xd0\xa4\xcf\xfb\xc0\xbc\xb5\x02\xcb\x90\xb2\x00\x12\x33\xc2\xb6\xbd\x02\xa8\x15\x5c\xe6\x32\x91\x0b\xe0\x28\xc4\x62\xe7\x26\x94\x18\x08\x46\x93\xa1\xc3\x5a\xe1\xf5\x0d\x2d\xf2\xe5\xd3\x47\xd8\x36\x8c\x21\xc1\x65\xa2\x65\xe9\x70\x20\x18\xa8\x21\x33\xfd\xd1\x4c\x32\x38\x02\x59\xa2\x66\x4c\xcc\x92\x3b\x74\x5b\x05\x63\x68\x53\x84\xf7\x0a\x3d\x5d\xbe\x83\x2b\xa4\xcc\x72\x17\x5a\x8a\xa1\x2d\x71\x8f\x1a\xd4\x66\x98\xc5\x47\xe5\x0e\x8b\x2e\x8e\xfb\x67\x80\xc0\xe9\xf6\x9a\xa4\x36\x37\xdf\x4c\xd7\x72\x2e\x01\xc2\x44\xbd\x4c\x30\xa8\x75\x98\x18\xe3\x8d\x92\x31\x7c\x78\x1b\xda\x63\x71\x3d\x4b\xb9\xac\x0e\x7e\x5f\xa4\x43\x97\x3b\xc7\x5f\x98\x17\xcd\x6e\x3a\x21\x24\x3e\x30\x90\x69\x96\x87\xa9\x4c\x74\x91\x51\x27\x16\xeb\xf0\x91\xfe\xe8\xd6\x72\xba\xfd\x6f\xcd\xc5\xc9\xfc\x2b\x93\x0b\xc6\xcf\xfb\x0c\xfb\xfc\x2f\xe1\xe3\xf6\xef\xc2\xcf\x80\xa7\xf8\xf3\x88\x17\x98\x4a\xe6\x13\xf2\x2e\xf3\x4b\x2d\xaf\xb0\xd3\xf1\x09\xfe\x87\x61\xbf\xba\x6b\x3e\xb1\xcb\xda\xcf\xe9\xe9\xbd\x7a\xcf\xd0\x7b\x6e\x8a\xa5\x99\xec\x1e\xe3\x1b\xe6\xd0\x3e\xfc\x71\x14\xa9\xdd\xa3\xe3\xef\xbd\x1e\x54\xfd\xec\x75\xad\x20\x99\x61\xdb\x7e\x06\x00\x00\xff\xff\xc6\xfe\x50\xc4\x0e\x03\x00\x00")

func assetsAddHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsAddHtml,
		"assets/add.html",
	)
}

func assetsAddHtml() (*asset, error) {
	bytes, err := assetsAddHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/add.html", size: 782, mode: os.FileMode(420), modTime: time.Unix(1480513685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcf\xc1\x6a\x84\x30\x10\x06\xe0\xbb\x4f\x31\xe4\xae\x69\x0b\x6d\xb7\x25\xe6\xd0\x87\xe8\xb5\x8c\x66\xb2\xa6\x8d\x89\x24\x23\x61\x11\xdf\xbd\xa8\xcb\x2e\xec\x5c\xe6\xf0\xf3\x7f\xf0\x2f\x0b\x18\xb2\x2e\x10\x08\x1b\x23\x53\x12\xb0\xae\x15\x00\x80\xca\x7d\x72\x13\x43\x4e\x7d\x2b\x06\xe6\x29\x7f\x4a\x39\x67\x6a\x6c\x0c\x8c\x85\x72\x1c\xa9\xe9\xe3\x28\x4f\xcf\x2f\x6f\xaf\xef\x27\xf3\xf1\xd4\xfc\x66\xa1\x95\x3c\x8a\xfa\x50\x26\xfd\x75\x01\x85\x30\x24\xb2\x77\xa7\x94\xd2\xe4\x12\x93\xe9\x88\x71\x57\x04\x30\xa6\x33\x71\x2b\x7e\x3a\x8f\xe1\x4f\xe8\x5b\xae\x24\x6a\xa8\xe1\xf0\x1e\xa5\xb3\xe3\x61\xee\x76\xe2\x56\x90\x9c\xc8\xfb\x58\x77\x73\x0a\x26\x96\x70\xb5\xef\xf4\x4e\x6d\xf7\xed\xa8\x40\x0c\xa0\x1c\xf4\x1e\x73\x6e\x85\x45\xb0\x58\x1f\x6a\x8d\x9e\xb7\x41\xee\xba\x45\xa2\x56\x72\xd2\x95\x92\x5d\x34\x97\xed\x0f\x3c\x7a\x5d\x2d\x0b\x50\x30\xb0\xae\xff\x01\x00\x00\xff\xff\x73\x31\x31\x8b\x4e\x01\x00\x00")

func assetsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsFooterHtml,
		"assets/footer.html",
	)
}

func assetsFooterHtml() (*asset, error) {
	bytes, err := assetsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/footer.html", size: 334, mode: os.FileMode(420), modTime: time.Unix(1480463928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x90\x4d\xcf\xd2\x40\x14\x85\xf7\xfd\x15\xd7\xd9\x9a\xb7\x13\x2d\x11\x62\xda\x26\xa0\x28\xca\x02\x02\x48\xc2\x72\x3a\x73\xe9\x8c\xcc\x07\x99\x3b\x15\x6b\xd3\xff\x6e\x80\xe8\xbb\xba\xb9\xcf\x39\x9b\xf3\x0c\x03\x28\x3c\x1b\x8f\xc0\x34\x0a\x85\x91\xc1\x38\x66\xe5\x9b\xcf\x9b\x4f\x87\xd3\x76\x09\x3a\x39\x5b\x67\xe5\xbf\x83\x42\xd5\x19\x40\x99\x4c\xb2\x58\x1f\x22\x5a\x1b\x60\xd1\x45\xaf\xc2\xcd\x97\xfc\x89\xef\x05\x87\x49\x80\xd4\x22\x12\xa6\x8a\x75\xe9\xfc\x32\x63\xc0\x1f\x91\x35\xfe\x02\x11\x6d\xc5\x28\xf5\x16\x49\x23\x26\x06\x3a\xe2\xb9\x62\x3a\xa5\x2b\x7d\xe4\xdc\x89\xdf\x52\xf9\xbc\x09\x21\x51\x8a\xe2\x7a\x7f\x64\x70\xfc\x3f\xe0\x45\x5e\xe4\x53\x2e\x89\x5e\x59\xee\x8c\xcf\x25\x11\xcb\x00\x00\x8c\x4f\xd8\x46\x93\xfa\x8a\x91\x16\xc5\x6c\xf2\xb2\x38\x9e\x8c\xd9\x7f\xfb\x82\xeb\x77\xea\xab\xfb\xbe\x9b\x5f\x7a\xd9\xad\xe6\xab\x5d\x5b\xbc\xdf\xb8\x1f\xf2\x76\x9b\x06\x5f\xec\x4e\xaa\x9d\x1c\xc5\xdb\xad\xdb\x1f\xe8\x0f\x5f\x7f\x98\xfd\x6a\xd4\xf2\xa7\x9e\x74\x0c\x64\x0c\x44\x21\x9a\xd6\xf8\x8a\x09\x1f\x7c\xef\x42\x47\xac\xce\x4a\xfe\x54\x53\x36\x41\xf5\x20\xad\x20\xaa\x98\x0c\x3e\x09\xe3\x31\xb2\xc7\xee\x26\xde\x05\x0c\x03\xa0\x57\x30\x8e\x7f\x03\x00\x00\xff\xff\x59\xe7\xf9\x64\x7a\x01\x00\x00")

func assetsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHeaderHtml,
		"assets/header.html",
	)
}

func assetsHeaderHtml() (*asset, error) {
	bytes, err := assetsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/header.html", size: 378, mode: os.FileMode(420), modTime: time.Unix(1480463928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\xdb\x8a\xdc\x30\x0c\x7d\xef\x57\x08\xd3\xd7\x8c\xa7\xfb\xd0\x27\x8f\x61\x6f\x85\x42\x29\xa5\x97\x0f\xd0\x8c\x94\xc6\xe0\xd8\xc1\xd6\xb6\x85\xe0\x7f\x2f\x4e\xe6\xb6\xb3\xd9\xa1\x7d\x09\x96\x8f\x8e\x14\x9d\x63\x8d\x23\x10\xb7\x2e\x30\x28\x17\x88\xff\x28\x28\xe5\x0d\xc0\x38\x82\x70\x3f\x78\x14\x06\xd5\x31\x12\xa7\x3d\x62\x06\x6b\x10\xba\xc4\xed\x46\x8d\x23\xac\xee\x30\xf3\x8f\xaf\x9f\xa0\x14\x24\x52\xd6\x38\xd8\x79\xcc\x79\xa3\x5a\x84\x16\x9b\xc1\x3f\x65\x65\x8d\x76\x16\x6e\x89\x40\x12\x7b\x1f\x61\x1b\x31\x91\xd1\x68\x8d\x1e\x6c\x2d\x2a\xb8\xf5\x7c\x60\xce\xc1\xf4\x6d\xb6\x31\x11\x27\xa6\x7d\x98\x25\xb9\x81\x49\x55\x52\xa5\xa5\xf9\x50\x8f\x9d\x35\x5a\xba\xf3\xf8\xae\x76\x81\x80\x3d\x5f\x22\xdf\x04\x93\x00\xa1\xbc\x40\x1e\x03\x2d\xde\xdf\x63\xa2\x6c\xb6\x09\xb4\xbd\x8f\xfd\xe0\x59\x98\x40\xc3\xf7\x28\xe8\x2f\x73\xbf\x44\x17\xe4\x5f\x93\x6f\x77\xe2\x62\xc8\xa7\x6b\xa3\x0f\x53\x8d\x23\x24\x0c\x3f\x19\x56\xd3\x24\x79\xd2\xff\x62\xee\x1a\xd0\x33\x47\xde\x9e\x59\xf2\xcb\xf1\x6f\x5d\x5d\xfa\xf8\x00\xa5\xbc\x74\xc7\xbb\xc0\xcd\xae\xc3\x24\x0a\x30\x39\x6c\x3a\x47\xc4\x61\xa3\x24\x3d\xf1\x6c\xdb\xec\x92\xd0\xf3\x86\xb5\xe6\x67\xec\x19\x4a\x59\x06\x1f\x50\x78\x52\x79\xf5\x21\xa6\x1e\x05\xd4\xfa\xa6\x59\xbf\x6b\x6e\xd6\xeb\xf7\xea\x2a\xeb\x31\xd0\x7f\x71\x26\x67\x4e\x32\x97\x02\x1a\x8e\xf7\xaf\xb2\x66\x8f\x16\x68\x33\xb0\xc8\x3b\x06\x00\xaf\x09\x4e\x5c\xcb\x5d\x93\x5c\x12\xe6\xee\xaa\xda\xa7\x9e\x67\x7f\x30\xbd\x0a\x80\xc3\xbb\xe0\x40\xfb\x75\xd4\xd3\x62\xd8\xcb\x9d\x6d\x63\x94\xfd\xce\x1e\xd3\xff\x06\x00\x00\xff\xff\x1f\x4b\x74\x81\xec\x03\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 1004, mode: os.FileMode(420), modTime: time.Unix(1480513685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsViewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x6f\xe3\x36\x10\xbd\xef\xaf\x18\xe8\x62\x19\xb6\x24\xc7\xed\xb6\x88\x63\x19\xe8\x26\xbb\x45\x81\x16\x0d\xda\xec\xa1\x08\x72\x18\x8b\x23\x8b\x5e\x9a\x14\x48\xca\x1f\xf0\xea\xbf\x17\xd4\x97\xa5\x8d\x53\xf4\xb0\x07\x03\x34\xe7\xcd\x7b\x8f\xa3\xe1\x48\xe7\x33\x30\x4a\xb9\x24\xf0\xf6\x9c\x0e\x1e\x94\xe5\x3b\x80\xf3\x19\x2c\xed\x72\x81\x96\xc0\xcb\x08\x19\xe9\x26\xb2\xcc\x57\x4b\x84\x4c\x53\x1a\x7b\xe7\x33\x84\x1f\xd0\xd0\xe7\xbf\x7e\x87\xb2\xf4\x56\x4b\x0e\x89\x40\x63\x62\x2f\x45\x48\x31\x40\xad\xd5\x21\x10\x94\x5a\x0f\x50\x73\x0c\x32\xce\x18\xc9\xd8\xb3\xba\x20\x6f\xb5\x8c\xf8\x0a\x7e\x55\xb0\xc6\xe4\x0b\x58\x05\x5c\x32\x3a\x2e\x23\x5c\x2d\xa3\x7c\xe5\xa4\x18\xdf\xc3\x81\x33\x9b\xc5\xde\x7c\x36\xcb\x8f\x1e\x64\xc4\x37\x99\x6d\xff\x3a\x10\xc0\x32\x41\xb9\x47\x03\x9c\xc5\xde\xba\xd0\x92\xa9\x83\xbc\xcf\x50\x5b\xa7\x50\xc7\x2a\xb6\x88\xf1\x7d\xb5\x30\x89\xe6\xb9\x05\xa3\x93\xd8\xcb\xac\xcd\xcd\x22\x8a\x12\x26\xb7\x26\x4c\x84\x2a\x58\x2a\x50\x53\x98\xa8\x5d\x84\x5b\x3c\x46\x82\xaf\x4d\x54\xf1\x85\x5b\x13\xcd\xc3\x1f\xc3\x59\xf3\x77\x5d\x48\x26\x28\xdc\x71\x19\x6e\x8d\x13\xab\x89\x7b\x1a\xb5\xc1\x3d\x6a\x48\xec\x11\x62\x60\x2a\x29\x76\x24\x6d\xb8\x21\xfb\x51\x90\x5b\x7e\x38\xfd\xc6\xfc\x6f\x7c\x8f\xef\xba\x3c\xab\x2c\x8a\x47\xc5\xa5\x35\x10\x43\x55\x70\x85\x9a\x85\xcd\x56\x59\x5e\xa0\x79\xb5\xf5\x77\x4e\xd2\x3e\x92\x7e\xc0\x93\x4b\xa8\xa2\xee\x79\x06\xa0\x51\x6e\xa8\xcd\xbf\x47\xcd\x1e\xb5\xda\x68\x32\x06\x82\xea\xc9\xb6\x48\x08\x1f\xd0\x52\xf8\x49\xe9\x1d\x5a\x70\xa5\xfe\x29\x98\xdd\x04\xb3\xb9\xeb\x80\x45\x05\xe8\xd4\xa7\x3d\x7e\x92\xac\x63\xea\xd9\x62\x78\x72\xd6\x9f\x5f\x3b\x71\x32\x43\xf1\xaa\xa3\xae\x0b\x7b\x6f\x49\xbd\x5c\xa4\x06\x55\x84\x18\x24\x1d\xa0\x5a\xfb\x89\x3d\x4e\xbb\x62\xd8\x53\x4e\x0b\x18\x09\x2e\x69\xd4\xb2\x32\xb4\xb8\xe8\x10\x00\x02\xd7\x24\xcc\xa2\x72\x3f\xed\x76\x1d\xca\x90\x35\x8b\xee\x38\x95\xa3\xde\x1a\x20\xe5\x42\x2c\xc0\x75\xf8\x74\xb0\xef\xba\x7c\xa3\x55\x21\xd9\xbd\x12\x4a\x2f\xc0\xd3\x9b\x35\xfa\x3f\xbf\x9f\xde\xdc\xce\xab\xdf\x2c\x9c\x8f\xbd\x61\x52\x65\x63\x01\xa3\x8f\xc6\xf2\x1d\x5a\x62\xa3\x61\xbc\xb6\xed\xba\xa9\x05\x3c\xa0\x45\x7f\xdc\x47\x95\xd3\xef\xe5\x75\xfe\xfe\xfd\x14\x6e\x6f\xa7\x70\xf3\xc3\x7c\x0a\xff\x61\xf7\x97\xc4\x16\x28\xde\xf2\x5a\x47\xaf\x18\xed\xd6\x2f\xef\x06\xd6\xcb\xe6\x42\xa4\x85\x4c\x2c\x57\xf2\xca\x81\xbb\x83\x51\xbb\xef\x7a\xae\xe9\x0d\x80\xbc\xbd\x10\xfd\xfb\x14\x55\x4f\x37\x14\x24\x37\x36\x6b\x91\x6e\xec\x3d\x39\xd0\x10\xdc\x86\x53\xa5\xc1\xe7\x10\xc3\xec\x0e\x38\x2c\x07\x0c\xc0\x27\x93\x71\xaf\xc2\x9d\x95\x67\xfe\xe2\xd8\x3a\xe6\xa0\xf1\x73\xd7\x41\x07\xaa\x6f\xe2\xda\x02\x69\xb2\x85\x96\x17\xfe\x3a\x5e\xbe\xaa\x51\xbf\xd0\x9d\x2f\xac\x36\x07\xd5\xf9\x8e\x67\xae\x87\xd0\x13\xed\x72\x88\x5f\x4f\xa4\x67\x97\xfa\xcc\x5f\x5e\xe0\xeb\x57\x98\x5d\x8e\x5f\x7b\xba\x52\xa6\x8e\xed\x7f\x94\xea\x0a\x96\xa7\xe0\x73\xf3\xa4\x18\x9e\xfc\x46\x7a\x3c\x1e\xdc\x81\xb5\x26\xfc\x72\x49\x28\xaf\x57\xba\xf6\x77\xb5\xcc\x17\x7a\x4b\x17\xea\x7a\xf0\x59\xfa\x73\xbd\x6d\xe6\x90\x1b\x76\xfe\xf8\xae\x17\xdf\x29\x69\x33\xf7\x52\xa8\x71\xee\x9d\xf0\xf9\xe9\xfe\x0f\xb7\xeb\x8f\x61\x02\x37\x77\x03\x32\xd7\xbd\xfe\x68\x36\x82\xc9\x37\x19\x35\xf3\x38\x34\x82\x27\xe4\x07\xf3\x81\xc8\x89\x50\xbf\xd2\xf8\x54\x08\xf1\x0f\xa1\xbe\xf8\x69\xce\xe9\x60\x10\xc7\x75\xd6\x04\xbc\xc0\x83\x49\xe3\xb3\xfd\xc7\xda\x76\xac\x3e\x06\x7a\xaf\xbc\xc1\x27\x43\xaa\x94\x6d\x3e\x19\xce\xe7\x6a\x5c\x97\xe5\xbf\x01\x00\x00\xff\xff\xa7\x93\x56\x03\x6a\x08\x00\x00")

func assetsViewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsViewHtml,
		"assets/view.html",
	)
}

func assetsViewHtml() (*asset, error) {
	bytes, err := assetsViewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/view.html", size: 2154, mode: os.FileMode(420), modTime: time.Unix(1480592655, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsViewsGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x99\x5b\x6f\x1b\x47\xb6\x85\x9f\xd9\xbf\xa2\x23\x20\x01\x79\xa0\x23\xf5\xfd\x22\xc0\x0f\x27\x37\xc4\x0f\x27\x01\x32\x99\xa7\xa9\x41\x50\xdd\x5d\xa5\x10\x23\x91\x1a\x92\x4a\xca\x36\xfc\xdf\x07\x5f\xed\xdd\x22\x25\x2b\x4e\x22\x18\x98\x07\x5a\x62\xab\xab\x6a\x5f\xd7\x5a\xbb\x7c\x79\x99\x7e\xb5\x9d\x5c\x7a\xed\x36\x6e\x67\x0f\x6e\x4a\x87\x37\xe9\xf5\xf6\x7f\x87\xf5\x66\xb2\x07\x7b\x91\x5c\x5e\xa6\xfb\xed\xfd\x6e\x74\xfb\x2b\x7e\xb7\xfb\xbd\x3b\xec\x2f\xed\x34\x5d\xfc\x72\xb8\xbd\x39\x79\xe4\xb7\xdb\x83\xdb\x3d\x7d\xfa\x8b\xb3\xd3\x87\x4f\xd7\x9b\xc9\x85\xa7\x0f\x7f\x5d\xbb\xdf\x9e\x7b\xb6\xbf\xb8\xde\xf2\xe8\xeb\x1f\xd2\xef\x7f\xf8\x29\xfd\xe6\xeb\xd7\x3f\x7d\x96\x24\x77\x76\xfc\x97\xbd\x76\xfa\x62\x92\xac\x6f\xef\xb6\xbb\x43\xba\x4c\x16\x67\xc3\x9b\x83\xdb\x9f\x25\x8b\xb3\x71\x7b\x7b\xb7\x73\xfb\xfd\xe5\xf5\xdb\xf5\x1d\x0f\xfc\xed\x81\x1f\xeb\xad\xfc\x7b\xb9\xde\xde\x1f\xd6\x37\x7c\xd9\xc6\x05\x77\xf6\xf0\xcb\xa5\x5f\xdf\x38\x7e\xe1\xc1\xfe\xb0\x5b\x6f\xae\xe3\xdf\x0e\xeb\x5b\x77\x96\xac\x92\xc4\xdf\x6f\xc6\x54\xe3\xf3\xa3\xb3\xd3\x92\x5f\xd2\x7f\xfc\x93\x63\xcf\xd3\x8d\xbd\x75\xa9\x2c\x5b\xa5\xcb\xf9\xa9\xdb\xed\xb6\xbb\x55\xfa\x2e\x59\x5c\xbf\x8d\xdf\xd2\xab\x57\x29\x56\x5d\x7c\xef\x7e\xfb\x31\xc6\x68\x19\xcd\xe6\xfb\x97\xf7\xde\xbb\x5d\xdc\x76\xb5\x4a\x16\x6b\x1f\x17\x7c\xf6\x2a\xdd\xac\x6f\xd8\x62\xb1\x73\x87\xfb\xdd\x86\xaf\xe7\xa9\xbf\x3d\x5c\x7c\xc3\xee\x7e\x79\xc6\x46\xe9\xe7\xff\xbe\x4a\x3f\xff\xf5\x4c\x2c\x89\x67\xad\x92\xc5\xfb\x24\x59\xfc\x6a\x77\xe9\x70\xef\x53\x39\x47\x0e\x49\x16\x3f\x8b\x39\xaf\xd2\xf5\xf6\xe2\xab\xed\xdd\x9b\xe5\x17\xc3\xbd\x3f\x4f\xaf\xdf\xae\x92\xc5\x78\xf3\xcd\x6c\xe9\xc5\x57\x37\xdb\xbd\x5b\xae\x92\x4f\x65\x0f\xdb\xc8\xfe\xbf\xb3\x91\xdb\xed\xc4\x6e\x7d\x38\xdc\xfb\x8b\x2f\x31\x7d\xb9\x3a\xe7\x8d\xe4\x7d\x92\x1c\xde\xdc\x69\x05\x10\xf2\xfb\xf1\xc0\x2e\xd1\x3f\xcd\x47\xb2\x58\x6f\xfc\x36\x4d\xb7\xfb\x8b\x6f\xd7\x37\xee\xf5\xc6\x6f\x1f\xd6\x69\x0a\xe7\xe7\x27\x3b\xc4\x1c\xa6\xa9\xa6\x31\x59\xec\xd7\x6f\xe3\xf7\xf5\xe6\xd0\x54\xc9\xe2\x96\x86\x49\x1f\x36\xfd\xff\xed\xe4\xe2\xc3\x9f\xd6\xb7\x2e\xa5\x4c\x2e\xf8\x8d\x73\x62\xa9\x2c\xfd\xfa\xe9\x59\xab\xf4\x7b\x7b\xeb\x96\x2b\x3d\x81\x33\xd5\x4b\xbf\xbe\xe0\xf4\xe4\xfd\x47\xd6\xfe\x6d\xfd\x96\xb5\xd1\x9a\xc7\x4b\x31\xf4\xa3\x4b\xb1\x75\xb9\x3a\xb5\xfc\xf1\x06\xb8\xf6\x47\x1b\xe0\xdc\x72\x75\x74\xf4\x83\x1d\xd4\xfb\xdf\xdf\xe4\xf5\xfe\xeb\xf5\x6e\xb9\x4a\x87\xed\xf6\xe6\x74\xb5\xbd\xd9\xff\x81\xe7\x6f\xf6\xe2\xb8\xdb\x79\x3b\xba\x77\xef\x4f\x56\x6b\x49\x50\xe5\x3f\x0b\x28\xfc\xdf\x34\x7d\x77\xb8\xbd\x49\x5f\x69\x31\x2c\xcf\x4c\xc8\xbd\x09\xdd\x60\x42\xd6\x99\x90\x65\xfa\xe9\x4d\x68\x9c\x09\x9d\x3e\xf3\xde\x04\x5b\x99\xd0\x17\x26\x54\xb9\xbc\x3f\x35\x26\x54\xbc\x3b\x9a\xd0\x35\x26\x38\x6f\x82\x67\x8d\x35\xa1\xcf\x4c\x68\x07\x13\xdc\x24\xfb\xf7\xec\xe3\x4c\x18\x3a\x13\x0a\x3e\x85\x09\x6d\x67\x42\x5d\x98\x50\x8e\x26\x54\x83\x09\xde\x9a\x50\xd4\x26\x0c\xb5\x09\x5d\x29\x6b\x9b\xca\x84\xaa\x33\x61\x2a\x4d\x68\x6b\x13\xfa\xd6\x04\x9b\x8b\x3d\xf5\x64\xc2\x64\xe5\xbd\x96\xbd\x07\x13\x0a\x6b\x42\x66\x4d\x18\x0a\x13\x86\xd6\x84\x29\x13\xbb\x47\x6c\x1b\x4c\x18\x33\x13\x86\x51\xce\xc8\x0a\x13\xc6\x41\x6c\xe5\x7d\xfc\xcc\xb1\xa7\x34\x61\x64\x7d\x63\xc2\x30\xc9\x7b\xb6\x33\x21\xaf\x4d\xa8\x47\x13\x5c\x63\x42\x59\x98\xd0\xe7\x26\x64\xf8\x98\x89\x4f\x63\x65\x42\x53\x98\xe0\x5a\x13\x8a\xc6\x84\xbe\x32\x21\xef\x24\xae\x15\xdf\x4b\xb1\x7d\x2c\x4d\xa8\xb1\x1b\x3f\xb0\x63\x32\xa1\x98\x4c\xf0\xac\xad\xc5\xd7\x0a\xdb\x3b\x13\xca\xc6\x84\x6e\x34\xa1\x60\x5d\x6e\x42\x53\x9b\x60\x0b\xf9\xe9\x7a\x13\x5a\xce\xce\xe4\x1c\x6c\xe4\x3d\xec\xf7\xc4\x26\x37\xa1\x1a\xc5\xd6\xb2\x13\x3f\xea\x5e\xd7\x37\xf2\xb7\x71\x94\x9c\x96\x83\x09\x6d\x65\x42\x4d\x1d\xd4\x26\x34\xa5\x09\x0d\xf9\x29\x4d\xe8\x2a\x13\x7c\x2b\x71\x2d\x27\x89\xfb\xe0\x24\x47\xc5\xa0\xf1\x1d\x4d\x68\x0b\x13\xf2\x56\x7c\xa3\x06\xf0\x15\xbf\x5a\xea\xc5\x9b\x90\x5b\x13\xa6\x4a\xce\xa6\x1e\xc6\x5a\xfc\xc4\x67\x6a\x83\x9a\x2a\xf8\xe9\x24\x57\x4d\x6b\x42\x97\x49\xce\xf0\xd5\xb3\xce\xca\x79\xc4\xa5\x24\x46\x5e\xfc\x98\x5a\x39\x9f\xf5\x59\x2e\xf9\xab\x2a\xc9\x5f\x8c\x41\x26\xf1\x89\x35\xd4\x49\xbc\x1c\xbe\x4d\xea\x7f\x6e\x42\x3b\x4a\x4d\xe6\x83\xd4\x15\x31\xc0\x76\x7c\xa6\x3e\x07\x62\x37\x8a\xad\xd4\x5b\xad\x3d\x51\x95\x52\x97\xc4\x70\x6c\xe5\x79\x3c\xa3\x35\x61\x9c\xa4\x8f\x4a\x2b\xb9\x29\xb0\xdd\x89\x3d\xd4\x5d\xd3\x9b\xd0\x93\x63\xea\xba\x17\x5b\xc9\x03\xb5\x55\xf3\x7e\x6b\x42\x4e\x6f\xd1\x1f\x99\x3c\xa7\xc7\x5c\x27\xfd\x87\xcf\x83\x95\x7c\x37\x5e\xce\x23\xae\x23\xf1\x1a\x25\x3f\xd4\x1d\x75\x3a\x36\xc7\x3e\xa0\x67\xf9\x19\xdf\xf1\x52\x8b\xc4\xc3\x6b\x1f\x13\x3f\xde\x25\xfe\xb6\x35\xc1\x77\x26\xf8\x52\xf0\x00\xbf\xf0\xaf\xb2\xd2\x0b\x79\x29\xb5\x4b\xec\x79\x87\x58\x91\x77\xeb\x4d\x18\x32\xa9\x67\x9f\x0b\xa6\x44\x7c\x68\x4d\x68\x72\x13\x06\x2f\xb6\x37\x83\xc4\x64\xc8\xa5\x1f\x89\x3d\x67\x93\x73\x3e\xe4\xb0\xd5\x67\x93\xe2\x4a\xa3\x38\x63\xc9\x27\xef\x8d\x26\xe4\x4e\x7c\x20\x7f\xd8\xc5\xbb\xec\x8b\x8f\xe4\x31\xaf\x24\xc6\x13\xb6\x95\xf2\x2e\xbe\xb2\x3f\x6b\xeb\x4a\xe2\xc8\x5e\xd4\x89\x9d\xa4\xb7\xd8\x1f\x7b\xa7\x41\xf2\x9e\x35\x47\x9c\x04\x87\xf8\x10\x5b\x7c\xab\x33\xc1\x01\x6a\x24\x2b\xe7\xf7\xce\x66\x89\xf4\x08\x84\x95\xb9\x9f\x53\x44\x33\xbf\x9f\x28\xaa\x64\xb1\x78\x8c\xe1\xe7\xc9\x62\x71\xf6\x44\x7b\x9e\x9d\x27\x8b\xd5\x03\xcb\x3e\x7a\x9d\x83\xfe\x27\x3e\x39\x3d\x28\x0a\x83\x07\xf5\xf5\x9c\x79\x7f\x24\x6e\x1e\x34\x49\x54\x15\x57\xaf\x9e\x32\xd4\x3b\xb8\xfb\x2a\xfd\xd0\xd2\x14\x66\xbe\x4a\xdb\xae\x38\x4f\xe1\xd8\xab\x53\x0a\x5e\x56\x45\xb6\x8a\xcf\x61\xce\x2b\x61\xd6\xbf\x6f\xd6\x61\x99\x57\x5d\x56\xe7\x65\xd3\xd5\xe7\x69\xb6\x7a\x9f\x2c\x2c\x87\x7e\x11\xb7\x7f\x17\xdd\xb9\x4a\xd5\x2b\x2c\xba\x8a\xff\xbe\x7f\x08\xa9\x3d\x7f\x86\x15\xbf\x8d\x3a\xfd\xc5\xc4\x08\x29\x50\x9c\x11\xa0\xad\x00\x26\x0d\x9e\x67\x52\x2c\x10\x04\xe4\x54\x79\x01\x1a\x47\x21\x3a\x69\x7e\x1a\xb3\x99\x84\xac\x20\xbf\xb9\x70\x69\x12\x9a\x3c\x92\xe1\x28\xa0\x09\x49\xd9\x46\x40\xab\xeb\x05\x4c\x8a\x52\x8a\x33\xcf\x05\x0c\x29\x66\x80\x6e\x54\x30\xa5\x98\x67\xd2\x02\x40\x68\xd0\xd6\xcb\xef\x34\x3e\xe7\x03\x86\x83\x36\x70\xb4\x59\x41\x90\xbd\x21\x00\x48\x91\x46\xc6\x66\x48\x10\xbf\x23\x30\x5b\x13\xda\x49\x81\xbf\x14\x20\xac\x9c\x3c\x03\x78\xa2\xef\x8d\x09\x45\x2f\x67\x02\x18\x65\x2f\xc0\x4e\x9c\x9a\x51\xc5\x03\x9f\x5a\xf7\x19\xa5\x49\x63\xf3\x97\x42\xac\xc4\x8d\xf8\x62\x2f\x20\x07\xb0\xd0\xb8\x80\xa3\x57\x70\x81\x58\xbc\xc6\x09\xe2\xe9\x6b\x11\x16\x80\x04\xc2\x82\xc6\x84\x94\x69\x70\x9a\x1b\x92\xe0\x4c\xf2\x44\x1c\xf1\xbf\x6d\x05\xec\x20\xee\xa9\x90\x3c\xe1\x3b\x00\x8a\x3d\xe4\x1c\x20\xa9\x21\x43\xcd\x31\xf9\x28\x95\x28\x0a\x05\x08\xc0\xbe\x53\x50\xc5\x76\xf2\x08\xb1\x12\x3f\xce\xc2\x77\x72\x14\x05\x40\x26\xe0\x03\x90\x0d\x0a\x4a\xe4\xd3\x11\x47\xe2\x07\x69\x37\x42\x16\x3d\x75\xd6\x09\x70\xd7\x9d\xd8\xdb\x96\x42\xcc\x51\x70\x34\x22\x08\xa8\x99\x28\xc6\x2a\xc9\x07\xf5\x05\x81\x3b\xad\x8d\x59\xb4\xd9\x4c\xe2\xcd\x7b\xd8\xc0\x5e\xb1\xb6\x21\xe6\x5a\x72\xce\x39\xf4\x41\xac\x6b\xc8\xd2\x49\xad\x56\x6a\x23\x00\x5e\xa9\x28\xa9\x95\x90\x88\x1d\xf1\x87\x58\x11\x0b\x65\x25\x04\xc9\xf9\x99\x97\xbc\x00\xe8\xb5\x0a\x1f\x6a\x90\xfc\x10\xcf\xb9\xce\xe8\x2b\x72\xf4\x14\x68\xb1\x91\x1e\x2a\x55\x84\x56\xee\xf4\xbd\x27\x40\x7b\xec\xeb\x97\x62\xed\x71\x87\x53\xb8\x3d\x99\xeb\x9f\x43\xdc\xe3\xa2\x3f\x0f\xba\x1f\x98\xfa\x89\x71\xf7\x91\xc9\x0a\xbd\x65\x59\xfd\x65\xe8\xad\x9a\xb2\x2f\xba\x4f\x07\xbd\xdf\xc5\x41\xff\xc5\xd0\x8b\xc6\xa3\x35\xaa\x49\xf5\x41\x21\xe5\x0d\xd7\x53\xc6\x94\x3d\x2d\x0f\x6c\xa1\x11\xa7\x5e\x34\x24\x25\x0c\x64\x51\x7e\x40\x27\xba\x7d\xd2\x36\xb2\xb3\x9e\xb7\xa2\x99\xf9\x30\x83\xa0\x89\x28\x6f\xda\xbb\x9d\x21\x41\x35\x74\xd6\x8a\x4e\x40\x03\x72\x16\x9a\x26\xea\x1e\xaf\x36\x67\x0a\xe7\x83\xb4\x0c\x5a\x12\x7b\x81\xc3\x7e\x10\x18\xa3\x25\x33\x85\x3c\x5a\x04\x08\x06\x46\xd0\xbf\xb4\x10\x6d\x8e\x4f\xbd\xce\x02\x68\x7a\xe0\x0e\xfd\xcc\x1e\xec\xd7\x2b\xcd\x40\x1f\x71\x66\x6a\x24\x6e\xa5\x42\x6f\xad\xba\x9a\x35\xe8\x2f\x34\x7c\x85\xef\xb5\x09\x79\x2f\xb1\xeb\x55\x87\x02\x89\x73\xfb\x33\xaf\xa1\xeb\xb1\xa9\xc9\x74\xb6\xa8\x05\x8a\xa3\x56\x9c\xa4\xc5\x81\x60\xa8\x09\xf8\x61\x8e\xc0\x8e\xaa\x17\xff\x81\x68\xf6\xc9\x67\x1a\xb3\x02\xc5\x4e\xb5\x2a\x73\x0a\x9a\x1b\x7f\xe3\xcc\x88\x8f\xb5\xe8\x2a\x72\x10\xf3\xa4\xfa\x96\x18\x31\x3b\xa1\x8d\xd9\x1f\xaa\x22\x77\x50\x0e\xbe\x02\x9b\xc4\xb8\xd1\x7c\x01\xaf\x11\x9e\x27\x81\xf5\x49\xed\x84\x32\x99\x41\x7d\x2f\x73\x21\xb1\x2a\x54\x7b\x77\xba\x0f\x50\x05\x7d\x31\x8b\x02\xaf\xd1\x56\x2f\xb4\x4e\x0c\x6a\x27\x7b\x42\x95\x71\x7e\xe9\xe5\x19\xb3\x16\x10\xd9\xa9\x3c\x80\xde\x73\xd5\xb8\x73\x4d\xf3\x37\xf2\x35\x9d\xcc\x88\x5e\xe7\x27\xfc\xc7\x3f\xfc\x85\x2a\xd1\xd8\x83\xce\x72\xbd\xee\x3b\x29\xb5\x42\x09\x5d\x21\x73\x02\xb4\xe0\xf0\x79\x90\xe7\xcc\x6a\xd4\x05\x73\x09\xbe\xb0\x06\x6d\x0b\x35\xf3\x0e\x30\x4c\x5d\xe0\x7f\x94\x10\x9a\x73\xce\xa3\x7e\x7a\xa5\x72\xd6\x23\x27\x80\x5c\x8b\x7d\x93\xd0\x07\xf6\xa1\x8d\xd9\x93\x9f\xb9\x52\x1e\x50\x1f\xcf\xd4\x79\x28\xce\x28\x3a\x03\xb2\x77\xa4\x5a\x27\xf3\x0e\xb5\xdf\xe8\x4f\x7a\x9a\x1c\xd0\xa7\xcc\x38\xcc\x1e\xc4\x83\xdc\xb0\x37\x73\x1a\xf5\x45\xdd\x32\x3f\x32\x93\x8d\x4e\xe4\x85\x57\x1d\x4f\x2e\x98\x11\x2b\x9d\xb1\xd1\xf1\xb3\x9e\x8f\xb6\x77\x72\x16\xf3\x41\xa6\x52\x03\x4a\x21\xbe\xcc\x70\xe4\x8d\x7a\x9a\x9c\xd4\xf1\xdc\x9b\x60\x03\xf4\x0f\x55\x31\xa7\xe2\xdb\x51\xe7\x1f\x69\x2a\xe6\xbe\x95\xba\x8a\x75\x63\x3f\x42\x53\x47\x0c\x7c\x29\x4d\x1d\x77\x38\xa5\xa9\x93\x8b\xe6\xe7\x68\xea\xb8\xe8\xcf\xd3\xd4\x07\xa6\x7e\x62\x9a\x7a\x64\xf2\x4c\x53\x6d\xf7\x5f\xa7\xa9\xd7\x9b\xc9\x85\x17\xb3\x54\xaf\x15\x49\x77\x50\xc9\x93\xde\x48\x50\x55\x11\x91\xbc\x8a\x4a\xbd\xe9\x82\xa9\xe8\xee\x38\x79\x0f\x32\x10\x20\x76\x61\x03\xc4\x21\x22\x38\x8a\xb4\x42\xc4\xb5\xd5\x9b\xb1\x4c\x27\x64\xd6\x72\xe6\xa8\xc3\x07\xe8\x02\x63\xd0\x4d\x43\x23\x6b\x79\xde\xaa\xa8\xa6\xa3\x9d\xfe\x0d\x11\x1a\x11\x22\x17\xdb\xb2\xf9\x86\xc2\x4b\xc5\xc3\xac\x74\x7e\xa3\xb7\x27\x20\x2f\x43\x43\x1c\x60\xf4\x66\xa3\xd0\x5b\x02\x62\x80\xff\x85\xde\xfa\x39\xbd\xed\x8a\x8c\xd6\x09\x62\x81\xa8\xa0\x69\xbc\x79\xa9\x04\x69\x60\x23\xba\x31\x57\x94\x28\x27\x41\x72\xfe\x06\xb3\xc6\xf3\xac\x4c\xda\x88\xca\xaa\x39\xda\x02\x1a\x38\xb5\x23\xde\x58\xe8\xc0\xd0\x7b\x15\xbc\x95\x88\x70\x50\x9f\x78\x60\x07\xf1\x69\x7b\xbd\xc5\xea\xe5\x76\xa0\xd6\x41\x2e\x57\x04\x8c\x8c\xeb\xe5\xe6\x8d\x0f\xe7\x81\x8e\xfc\xbd\x51\xd4\xaf\xf4\x06\xb1\x55\x14\x8c\x83\xd9\x20\xbe\x80\xe6\xb0\x66\xd3\xc9\x5a\x04\x37\xa8\x8e\x02\x29\xac\xa0\x2e\x48\x05\xba\xc1\xb0\x20\x1a\x67\x22\xce\xe3\x80\xd8\x68\x4c\xf4\x56\x08\x06\x25\x3f\x20\x59\xbc\x35\x85\x65\x73\x61\xc3\xba\x16\xff\xa8\x0b\x3e\xa0\x10\x02\x9b\x58\x90\x3b\x58\x15\xff\xe2\xcd\x51\x29\x08\x6b\x75\xe0\x60\x0f\xd8\x3a\xde\xf4\x29\xf3\xc3\x0a\x0c\x3c\xbd\x22\x1d\xb5\x01\x5b\x54\x3a\xbc\x64\xaa\xa4\x40\x4b\xde\xa5\x36\xe2\x2d\xe3\x28\x76\x53\x43\x83\xde\xc6\x61\x43\xbc\x65\xc9\x04\x25\x7b\x1d\x48\xc6\x52\xd4\x5a\xac\x93\x4e\xea\x12\x95\x35\xa8\xca\xa3\x9e\x22\xcb\x7a\xb1\x83\x1e\x88\x4c\x57\x48\x6d\x30\x18\x51\x2b\xd4\x07\xf9\x8b\xec\x73\x52\xa3\x85\xb2\x0b\x39\x44\xe9\x30\xac\x4c\xfa\x9c\x9c\xa3\x1c\xa3\x5a\x2b\xa4\x7e\xe2\x6d\x65\x26\xc3\x5d\xbc\x8d\x75\xc2\x56\xd8\xec\xf5\xe6\xd8\x6b\x2f\xd6\x7a\x2b\x0a\x73\x7b\xed\xfb\x38\xd0\xe9\x6d\x1e\x8c\x32\xe8\xed\x33\x4a\x89\x58\x8f\xb3\x4d\x56\x6a\x35\x0e\xc6\xa3\xa8\x15\xce\x8b\xb7\xc9\xb9\xf8\x12\x6f\x0d\x27\x3d\x6f\x14\x1c\x71\x7a\x73\x3b\xcd\x75\xde\xe8\xe0\xd7\xa8\xc2\x1b\x55\xd1\x59\xb1\x99\xde\xa1\x26\xa9\x83\xf9\xe6\x1d\xbf\x23\x3b\xe6\x52\x4f\xb9\xb2\x5d\x64\x68\x2b\xcf\x58\x4b\x0e\x1a\xbd\x75\x9b\xe6\xdb\x48\x55\x19\xd4\xae\xd3\x1a\x9f\x14\x53\xe2\x30\xac\x76\x80\x2d\xf1\xb6\xbc\x55\x15\x67\xf5\x86\xb7\xd5\x1b\x42\xbd\x8d\x8e\x37\xc4\x8d\xf4\x07\x31\x67\x10\x24\xa7\xe5\x70\xbc\x71\xe3\x7d\x6a\x89\x3d\xe3\xa5\x8b\xaa\x17\xea\x81\xef\xf4\x1e\xfe\x3b\x55\x28\x28\xfa\x59\x65\x60\x0b\xb6\xc5\x21\x73\x52\x35\xad\x75\x37\xe8\x2d\x3e\x75\x08\xde\xb6\x1a\x03\xea\x23\x4e\x06\x7a\xa1\x12\x71\x4f\xb1\xaf\xd7\xdb\x42\xfa\x94\xb8\xcd\x6a\xff\xb9\xdb\x41\xe2\x5e\xe9\x0d\x3b\xfd\xe5\xc6\x8f\xdc\x0e\x3e\x50\xcd\x4b\xc5\xc0\xc3\x06\xa7\x5a\xe0\xf8\xdf\xcb\xcf\x49\x81\x87\x25\x7f\x5e\x09\x3c\x35\xf3\x13\x0b\x81\x53\x7b\x55\x07\xe4\x59\xf6\xd7\xe7\xd5\x17\x5c\x15\xfe\x27\x00\x00\xff\xff\xe4\x13\xfa\xf6\x00\x20\x00\x00")

func assetsViewsGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsViewsGo,
		"assets/views.go",
	)
}

func assetsViewsGo() (*asset, error) {
	bytes, err := assetsViewsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/views.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1481026514, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/add.html": assetsAddHtml,
	"assets/footer.html": assetsFooterHtml,
	"assets/header.html": assetsHeaderHtml,
	"assets/index.html": assetsIndexHtml,
	"assets/view.html": assetsViewHtml,
	"assets/views.go": assetsViewsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"add.html": &bintree{assetsAddHtml, map[string]*bintree{}},
		"footer.html": &bintree{assetsFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{assetsHeaderHtml, map[string]*bintree{}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"view.html": &bintree{assetsViewHtml, map[string]*bintree{}},
		"views.go": &bintree{assetsViewsGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

