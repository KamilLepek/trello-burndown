// Code generated by go-bindata.
// sources:
// assets/add.html
// assets/footer.html
// assets/header.html
// assets/index.html
// assets/view.html
// assets/views.go
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsAddHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x92\xd1\x8a\xd5\x40\x0c\x86\xef\x7d\x8a\x90\xfb\x6e\x5f\x60\x3a\xa0\x28\xe2\xb5\x0f\x20\xe9\x49\xc6\x0e\x4e\x27\x43\x9a\xae\xbb\x94\xf3\xee\xd2\xb3\xdd\xb3\xab\xa2\xb0\x9c\xbb\xd0\xa4\xdf\xff\xc1\xfc\xdb\x06\x2c\x29\x57\x01\x24\x66\x84\xf3\xf9\x1d\xc0\xb6\x81\xcb\xdc\x0a\xb9\x00\x4e\x42\x2c\x76\x6c\x42\x8b\x81\x60\x32\x49\x03\xde\xdd\x61\x0c\x19\x4e\x85\x96\x65\xc0\x44\x90\xa8\x23\x33\xfd\xd9\x15\x49\x8e\x40\x96\xa9\x9b\x32\xb3\xd4\x01\xdd\x56\xc1\x18\xfa\x1c\xe1\xb3\xc2\x48\xa7\x1f\xe0\x0a\xb9\xb2\x3c\x84\x9e\x62\xe8\x5b\xdc\xf1\x49\x6d\x86\x59\x7c\x52\x1e\xb0\xe9\xe2\xb8\x7f\x06\x08\x9c\xef\xaf\x49\x6a\x73\xf7\xdd\x74\x6d\xc7\x12\x20\x14\x1a\xa5\x40\x52\x1b\x30\x33\xc6\x0f\x4a\xc6\xf0\xe5\x63\xe8\x2f\x8b\xeb\x59\xae\x6d\x75\xf0\xc7\x26\x03\xba\x3c\x38\xfe\xc6\x3c\x69\x75\xd3\x82\x90\xf9\x82\x81\x4a\xb3\x3c\x4d\xad\xd0\x49\x26\x2d\x2c\x36\xe0\x33\xfd\xd9\xad\xe7\x7c\xff\x66\xcd\xc5\xc9\xfc\x1b\x93\x0b\xc6\xaf\xfb\x0c\xfb\xfc\x3f\xe1\xcb\xed\xbf\x85\x5f\x01\x0f\xf1\xd7\x11\x37\x98\x4a\xe5\x03\xf2\xa9\xf2\xad\x96\x57\xd8\xe1\xf8\x02\xff\xcb\x70\x5c\xdd\xb5\x1e\xd8\x65\x1d\xe7\xfc\xf2\x5e\xa3\x57\x18\xbd\x76\xcd\xf2\x4c\xf6\x88\xf1\x3d\x73\xe8\x9f\xfe\xb8\x14\xa9\xdf\xa3\xe3\x9f\x5d\x4e\xaa\x7e\x74\x79\xdb\x40\x2a\xc3\xf9\xfc\x2b\x00\x00\xff\xff\x5b\xd7\x68\xbf\x02\x03\x00\x00")

func assetsAddHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsAddHtml,
		"assets/add.html",
	)
}

func assetsAddHtml() (*asset, error) {
	bytes, err := assetsAddHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/add.html", size: 770, mode: os.FileMode(420), modTime: time.Unix(1480463928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsFooterHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\xcf\xc1\x6a\x84\x30\x10\x06\xe0\xbb\x4f\x31\xe4\xae\x69\x0b\x6d\xb7\x25\xe6\xd0\x87\xe8\xb5\x8c\x66\xb2\xa6\x8d\x89\x24\x23\x61\x11\xdf\xbd\xa8\xcb\x2e\xec\x5c\xe6\xf0\xf3\x7f\xf0\x2f\x0b\x18\xb2\x2e\x10\x08\x1b\x23\x53\x12\xb0\xae\x15\x00\x80\xca\x7d\x72\x13\x43\x4e\x7d\x2b\x06\xe6\x29\x7f\x4a\x39\x67\x6a\x6c\x0c\x8c\x85\x72\x1c\xa9\xe9\xe3\x28\x4f\xcf\x2f\x6f\xaf\xef\x27\xf3\xf1\xd4\xfc\x66\xa1\x95\x3c\x8a\xfa\x50\x26\xfd\x75\x01\x85\x30\x24\xb2\x77\xa7\x94\xd2\xe4\x12\x93\xe9\x88\x71\x57\x04\x30\xa6\x33\x71\x2b\x7e\x3a\x8f\xe1\x4f\xe8\x5b\xae\x24\x6a\xa8\xe1\xf0\x1e\xa5\xb3\xe3\x61\xee\x76\xe2\x56\x90\x9c\xc8\xfb\x58\x77\x73\x0a\x26\x96\x70\xb5\xef\xf4\x4e\x6d\xf7\xed\xa8\x40\x0c\xa0\x1c\xf4\x1e\x73\x6e\x85\x45\xb0\x58\x1f\x6a\x8d\x9e\xb7\x41\xee\xba\x45\xa2\x56\x72\xd2\x95\x92\x5d\x34\x97\xed\x0f\x3c\x7a\x5d\x2d\x0b\x50\x30\xb0\xae\xff\x01\x00\x00\xff\xff\x73\x31\x31\x8b\x4e\x01\x00\x00")

func assetsFooterHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsFooterHtml,
		"assets/footer.html",
	)
}

func assetsFooterHtml() (*asset, error) {
	bytes, err := assetsFooterHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/footer.html", size: 334, mode: os.FileMode(420), modTime: time.Unix(1480463928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsHeaderHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x44\x90\x4d\xcf\xd2\x40\x14\x85\xf7\xfd\x15\xd7\xd9\x9a\xb7\x13\x2d\x11\x62\xda\x26\xa0\x28\xca\x02\x02\x48\xc2\x72\x3a\x73\xe9\x8c\xcc\x07\x99\x3b\x15\x6b\xd3\xff\x6e\x80\xe8\xbb\xba\xb9\xcf\x39\x9b\xf3\x0c\x03\x28\x3c\x1b\x8f\xc0\x34\x0a\x85\x91\xc1\x38\x66\xe5\x9b\xcf\x9b\x4f\x87\xd3\x76\x09\x3a\x39\x5b\x67\xe5\xbf\x83\x42\xd5\x19\x40\x99\x4c\xb2\x58\x1f\x22\x5a\x1b\x60\xd1\x45\xaf\xc2\xcd\x97\xfc\x89\xef\x05\x87\x49\x80\xd4\x22\x12\xa6\x8a\x75\xe9\xfc\x32\x63\xc0\x1f\x91\x35\xfe\x02\x11\x6d\xc5\x28\xf5\x16\x49\x23\x26\x06\x3a\xe2\xb9\x62\x3a\xa5\x2b\x7d\xe4\xdc\x89\xdf\x52\xf9\xbc\x09\x21\x51\x8a\xe2\x7a\x7f\x64\x70\xfc\x3f\xe0\x45\x5e\xe4\x53\x2e\x89\x5e\x59\xee\x8c\xcf\x25\x11\xcb\x00\x00\x8c\x4f\xd8\x46\x93\xfa\x8a\x91\x16\xc5\x6c\xf2\xb2\x38\x9e\x8c\xd9\x7f\xfb\x82\xeb\x77\xea\xab\xfb\xbe\x9b\x5f\x7a\xd9\xad\xe6\xab\x5d\x5b\xbc\xdf\xb8\x1f\xf2\x76\x9b\x06\x5f\xec\x4e\xaa\x9d\x1c\xc5\xdb\xad\xdb\x1f\xe8\x0f\x5f\x7f\x98\xfd\x6a\xd4\xf2\xa7\x9e\x74\x0c\x64\x0c\x44\x21\x9a\xd6\xf8\x8a\x09\x1f\x7c\xef\x42\x47\xac\xce\x4a\xfe\x54\x53\x36\x41\xf5\x20\xad\x20\xaa\x98\x0c\x3e\x09\xe3\x31\xb2\xc7\xee\x26\xde\x05\x0c\x03\xa0\x57\x30\x8e\x7f\x03\x00\x00\xff\xff\x59\xe7\xf9\x64\x7a\x01\x00\x00")

func assetsHeaderHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsHeaderHtml,
		"assets/header.html",
	)
}

func assetsHeaderHtml() (*asset, error) {
	bytes, err := assetsHeaderHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/header.html", size: 378, mode: os.FileMode(420), modTime: time.Unix(1480463928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x53\x4d\x6f\xd4\x30\x10\xbd\xf3\x2b\x06\xdf\xbd\x5e\x7a\xe0\xe4\xb5\x54\xda\x22\x71\x41\x48\xf0\x07\x66\x77\x26\xc4\x92\x63\x47\x93\x29\x20\x45\xf9\xef\x28\xc9\x7e\xb4\xbb\x21\xa2\x97\xc8\xf3\xf1\x9e\x33\xef\x79\xfa\x1e\x88\xab\x98\x19\x4c\xcc\xc4\x7f\x0c\x0c\xc3\x3b\x80\xbe\x07\xe5\xa6\x4d\xa8\x0c\xa6\x66\x24\x96\x63\xc5\xb7\xc1\x23\xd4\xc2\xd5\xce\x20\x91\x09\x3e\xc2\x21\x61\xd7\xed\x4c\x85\x50\xa1\x6d\xd3\x73\x67\x82\x77\x31\xc0\x3d\x11\xa8\x70\x4a\x05\xf6\x05\x85\xbc\xc3\xe0\x5d\x1b\x46\x1a\xc5\x7d\xe2\x13\x72\x0e\xa6\xaf\xdd\x17\x21\x16\xa6\x63\xd8\xa9\xc4\x96\xc9\x8c\xa0\x11\x26\xf3\x61\x3c\xd6\xc1\x3b\xad\x5f\xc6\x9f\xc6\x5b\x20\x63\xc3\xd7\x95\xef\x8a\xa2\x40\xa8\x37\x95\xa7\x4c\x8b\xf9\x07\x14\xea\xfc\x5e\xc0\x85\x87\xd2\xb4\x89\x95\x09\x1c\xfc\x28\x8a\xe9\xba\xf7\x5b\x89\x59\xff\xb7\xf9\xfe\xa0\xb1\xe4\xee\x92\xf6\xee\x34\x55\xdf\x83\x60\xfe\xc9\xb0\x99\xb4\xbe\x9a\x78\x0c\xe8\xa2\xfe\xaf\xc8\xbf\x5d\xdf\xc3\xe6\xcb\x23\x0c\xc3\xad\x11\x29\x66\xb6\x87\x1a\x45\x0d\xa0\x44\xb4\x75\x24\xe2\xbc\x33\x2a\xcf\x3c\x3b\x34\x1b\xa2\xf4\xfa\x86\x91\xf3\x2b\x36\x0c\xc3\xb0\x5c\x7c\x44\xe5\x49\xd0\xcd\xe7\x22\x0d\x2a\x98\xed\x9d\xdd\x7e\xb0\x77\xdb\xed\x47\xb3\x8a\x7a\xca\xf4\x26\xcc\x64\xc2\x45\xd1\x61\x00\x07\xe7\xfc\x3f\x51\xb3\x1d\x0b\xb0\xb9\xb0\x88\x3b\x07\x00\xfe\xbd\xb5\x67\x95\x99\xa2\xae\xa9\xdc\x72\x3e\xc4\xb4\xaa\xb0\xb5\xaf\xd8\x4f\xcc\xc4\xe3\xdf\xad\x71\xab\x60\x57\xaf\x52\x5f\x46\x78\x31\xd0\xf4\x9e\x00\x4e\x2f\x8a\x33\x1d\x57\xd7\x4d\x2b\x15\xae\xf7\xbb\x2a\x45\x8f\xfb\x7d\x6e\xff\x1b\x00\x00\xff\xff\x4d\xd7\x78\x59\x18\x04\x00\x00")

func assetsIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsIndexHtml,
		"assets/index.html",
	)
}

func assetsIndexHtml() (*asset, error) {
	bytes, err := assetsIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/index.html", size: 1048, mode: os.FileMode(420), modTime: time.Unix(1480463928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsViewHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\xc1\x6e\xe3\x36\x10\xbd\xef\x57\x0c\x78\x89\x83\x95\x25\xc7\x6d\x5a\xc4\xb1\x0c\x74\x93\x6d\xd1\x5b\x80\xf6\x16\xe4\x30\x16\x47\x16\x53\x9a\x14\xc8\x91\xed\xc0\xd0\xbf\x17\x94\x25\x59\xca\x3a\x8b\x2d\xd0\x83\x01\x6a\xe6\xf1\xcd\xe3\x9b\x31\x79\x3c\x82\xa4\x5c\x19\x02\xb1\x53\xb4\x17\x50\xd7\x9f\x00\x8e\x47\x60\xda\x96\x1a\x99\x40\x14\x84\x92\x5c\x9b\x59\x96\xab\x25\x42\xe1\x28\x4f\x45\x1c\x8b\xd5\x52\x41\xa6\xd1\xfb\x54\xe4\x08\x39\x4e\xd1\x39\xbb\x9f\x6a\xca\x59\x00\x3a\x85\xd3\x42\x49\x49\x26\x15\xec\x2a\x12\xab\x65\xa2\x56\xf0\x87\x85\x35\x66\xff\x00\x5b\x50\x46\xd2\x61\x99\xe0\x6a\x99\x94\xab\x40\x2f\xd5\x0e\xf6\x4a\x72\x91\x8a\xf9\x6c\x56\x1e\x04\x14\xa4\x36\x05\x77\x9f\x01\x04\xb0\xcc\xd0\xec\xd0\x83\x92\xa9\x58\x57\xce\x48\xbb\x37\x0f\x05\x3a\x0e\x15\x4e\xb9\x86\x2d\x91\x6a\xd7\x2c\x7c\xe6\x54\xc9\xe0\x5d\x96\x8a\x82\xb9\xf4\x8b\x24\xc9\xa4\x79\xf5\x71\xa6\x6d\x25\x73\x8d\x8e\xe2\xcc\x6e\x13\x7c\xc5\x43\xa2\xd5\xda\x27\x0d\x5f\xfc\xea\x93\x79\xfc\x73\x3c\x6b\x3f\xd7\x95\x91\x9a\xe2\xad\x32\xf1\xab\x0f\xc5\x4e\xc4\x83\x1a\x27\x81\x3b\x74\x90\xf1\x01\x52\x90\x36\xab\xb6\x64\x38\xde\x10\x7f\xd5\x14\x96\x5f\xde\xfe\x94\x93\x77\xba\xaf\xef\xfb\x7d\x6c\x19\xf5\x93\x55\x86\x3d\xa4\xa1\x15\xf1\x17\x8b\x4e\xc6\x6d\xa8\xae\xcf\xd0\xb2\x09\xfd\x55\x92\xe1\x27\x72\x8f\xf8\x06\x29\x3c\x37\xd9\xd0\xc3\x29\x38\x34\x1b\xea\xf6\x3f\xa0\x93\x4f\xce\x6e\x1c\x79\x0f\xd3\xa6\x9b\x1d\x12\xce\xe4\xd1\x60\x3b\x19\xd9\x03\x5f\xce\x55\x25\xbe\xf9\xcb\x85\x1e\x91\x69\xcc\x2d\x02\xf9\xef\xd6\x6d\x91\x21\xb4\xf0\x97\xe9\xec\x66\x3a\x9b\x87\x69\x12\x3f\x50\x6a\x64\x12\xa4\x60\x68\x0f\xcd\x7a\x92\xf1\x21\x82\x63\xcb\xc0\x6f\x25\x2d\xe0\x4a\x2b\x43\x57\x1d\xab\x44\xc6\x45\x8f\x00\xd0\xb8\x26\xed\x17\x8d\xfa\xa8\x8f\x06\x94\x27\xf6\x8b\xfe\x38\x8d\xa2\xc1\x1a\x20\x57\x5a\x2f\x20\x0c\x70\x34\x8a\x87\x21\xde\x38\x5b\x19\xf9\x60\xb5\x75\x0b\x10\x6e\xb3\xc6\xc9\xaf\xb7\xd1\xcd\xdd\xbc\xf9\xcd\xe2\xf9\xb5\x18\x6f\x6a\x64\x2c\xe0\xea\xab\x67\xb5\x45\x26\x79\x35\xce\x9f\x64\x87\x61\xe9\x00\x8f\xc8\x38\xb9\x1e\xa2\xea\xe8\xff\xd2\x3a\xbf\xbd\x8d\xe0\xee\x2e\x82\x9b\x9f\xe6\x11\x7c\x47\xee\x6f\x19\x57\xa8\x3f\xd2\x7a\xca\x5e\x10\xda\xaf\x5f\x3e\x8d\xa4\xd7\xed\xbc\xe7\x95\xc9\x58\x59\x73\xe1\xc0\xfd\xc1\xa8\x8b\x87\x99\x6b\x67\x03\xa0\xec\xe6\x7d\xf8\x77\x49\x9a\xee\xc6\x9a\xcc\x86\x8b\x0e\x19\x6e\xb2\xbf\x03\x68\x0c\xee\xd2\xb9\x75\x30\x51\x90\xc2\xec\x1e\x14\x2c\x47\x0c\xa0\x3e\x7f\xbe\x1e\x38\xdc\x4b\x79\x56\x2f\x81\xad\x67\x9e\xb6\x7a\xee\x7b\xe8\xa8\xea\x87\xb8\xce\x20\x47\x5c\x39\x73\xe6\x3f\xe5\xeb\x6f\x3c\x1a\x1a\xdd\xeb\xc2\x26\x38\x72\xe7\x3f\x9e\xf9\x9b\x7b\xe4\x23\x03\x4e\xa5\x2e\x9c\xfe\x3d\xc1\xb3\x7a\xf9\x01\x2f\xbe\xb3\xeb\x9d\x33\xa7\xc2\x67\x5b\x86\x37\xef\xe8\xb5\xca\xad\xe5\xf6\xb5\x3a\x1e\x9b\x6b\xa5\xae\xff\x0d\x00\x00\xff\xff\x65\x80\xf2\x59\xe5\x06\x00\x00")

func assetsViewHtmlBytes() ([]byte, error) {
	return bindataRead(
		_assetsViewHtml,
		"assets/view.html",
	)
}

func assetsViewHtml() (*asset, error) {
	bytes, err := assetsViewHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/view.html", size: 1765, mode: os.FileMode(420), modTime: time.Unix(1480463928, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsViewsGo = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x99\x5b\x6f\x23\xc7\x11\x85\x9f\x39\xbf\x62\x2c\xc0\x06\x19\x28\xd2\xdc\x2f\x02\xf6\x21\xbe\xc1\xfb\x10\x1b\x70\x9c\xbc\xa4\x03\xa3\x67\xa6\x5b\x1e\x44\x22\x15\x92\xb2\x7b\x77\xb1\xff\x3d\xf8\xba\x8a\x22\xa5\x95\x2f\x10\x16\xf0\x83\x57\xe4\x70\xba\xba\xaa\xba\xea\x9c\x53\xed\xcb\xcb\xf4\x8b\xcd\xe4\xd2\x6b\xb7\x76\x5b\xbb\x77\x53\x3a\xbc\x49\xaf\x37\x7f\x1d\xe6\xf5\x64\xf7\xf6\x22\xb9\xbc\x4c\x77\x9b\xfb\xed\xe8\x76\x57\x7c\xb6\xbb\x9d\xdb\xef\x2e\xed\x34\x5d\xfc\xb4\xbf\xbd\x39\x79\xe4\x37\x9b\xbd\xdb\x3e\x7d\xfa\x93\xb3\xd3\x87\x4f\xe7\xf5\xe4\xc2\xd3\x87\x3f\xcf\xee\x97\xe7\x9e\xed\x2e\xae\x37\x3c\xfa\xf2\xbb\xf4\xdb\xef\x7e\x48\xbf\xfa\xf2\xf5\x0f\x9f\x24\xc9\x9d\x1d\xff\x6b\xaf\x9d\xbe\x98\x24\xf3\xed\xdd\x66\xbb\x4f\x97\xc9\xe2\x6c\x78\xb3\x77\xbb\xb3\x64\x71\x36\x6e\x6e\xef\xb6\x6e\xb7\xbb\xbc\x7e\x3b\xdf\xf1\xc0\xdf\xee\xf9\x33\x6f\xe4\xdf\xcb\x79\x73\xbf\x9f\x6f\xf8\xb2\x89\x0b\xee\xec\xfe\xa7\x4b\x3f\xdf\x38\x3e\xf0\x60\xb7\xdf\xce\xeb\xeb\xf8\xdb\x7e\xbe\x75\x67\xc9\x2a\x49\xfc\xfd\x7a\x4c\x35\x3f\xdf\x3b\x3b\x2d\xf9\x90\xfe\xfb\x3f\x6c\x7b\x9e\xae\xed\xad\x4b\x65\xd9\x2a\x5d\x1e\x9e\xba\xed\x76\xb3\x5d\xa5\xef\x92\xc5\xf5\xdb\xf8\x2d\xbd\x7a\x95\xe2\xd5\xc5\xb7\xee\x97\xef\x63\x8e\x96\xd1\x6d\xbe\x7f\x7e\xef\xbd\xdb\x46\xb3\xab\x55\xb2\x98\x7d\x5c\xf0\xc9\xab\x74\x3d\xdf\x60\x62\xb1\x75\xfb\xfb\xed\x9a\xaf\xe7\xa9\xbf\xdd\x5f\x7c\x85\x75\xbf\x3c\xc3\x50\xfa\xe9\xff\xae\xd2\x4f\x7f\x3e\x13\x4f\xe2\x5e\xab\x64\xf1\x3e\x49\x16\x3f\xdb\x6d\x3a\xdc\xfb\x54\xf6\x91\x4d\x92\xc5\x8f\xe2\xce\xab\x74\xde\x5c\x7c\xb1\xb9\x7b\xb3\xfc\x6c\xb8\xf7\xe7\xe9\xf5\xdb\x55\xb2\x18\x6f\xbe\x3a\x78\x7a\xf1\xc5\xcd\x66\xe7\x96\xab\xe4\x63\xf9\x83\x19\xb1\xff\x2b\x86\xdc\x76\x2b\x7e\xeb\xc3\xe1\xde\x5f\x7c\x8e\xeb\xcb\xd5\x39\x6f\x24\xef\x93\x64\xff\xe6\x4e\x2b\x80\x94\xdf\x8f\x7b\xac\xc4\xf8\xf4\x3c\x92\xc5\xbc\xf6\x9b\x34\xdd\xec\x2e\xbe\x9e\x6f\xdc\xeb\xb5\xdf\x3c\xac\xd3\x23\x3c\x3c\x3f\xb1\x10\xcf\x30\x4d\xf5\x18\x93\xc5\x6e\x7e\x1b\xbf\xcf\xeb\x7d\x53\x25\x8b\x5b\x1a\x26\x7d\x30\xfa\xf7\xcd\xe4\xe2\xc3\x1f\xe6\x5b\x97\x52\x26\x17\x7c\x62\x9f\x58\x2a\x4b\x3f\x3f\xdd\x6b\x95\x7e\x6b\x6f\xdd\x72\xa5\x3b\xb0\xa7\x46\xe9\xe7\x0b\x76\x4f\xde\xff\xc6\xda\x7f\xcc\x6f\x59\x1b\xbd\x79\xbc\x14\x47\x7f\x73\x29\xbe\x2e\x57\xa7\x9e\x3f\x36\x40\x68\xbf\x67\x80\xe0\x96\xab\x63\xa0\x1f\x58\xd0\xe8\x7f\xdd\xc8\xeb\xdd\x97\xf3\x76\xb9\x4a\x87\xcd\xe6\xe6\x74\xb5\xbd\xd9\xfd\x4e\xe4\x6f\x76\x12\xb8\xdb\x7a\x3b\xba\x77\xef\x4f\x56\x6b\x49\x50\xe5\x3f\x0a\x28\xfc\x6d\x9a\xbe\xd9\xdf\xde\xa4\xaf\xb4\x18\x96\x67\x26\xe4\xde\x84\x6e\x30\x21\xeb\x4c\xc8\x32\xfd\xaf\x37\xa1\x71\x26\x74\xfa\xcc\x7b\x13\x6c\x65\x42\x5f\x98\x30\xe5\x26\x74\xd6\x84\xa9\x36\xa1\xe2\xdd\xd1\x84\xae\x31\xc1\x79\x13\xda\x49\x7e\xeb\x59\x33\x88\x8d\xda\x9b\xd0\x64\x26\x94\xd6\x04\x9b\x99\x50\x74\x26\xb8\xc2\x84\xa1\x36\x21\xf3\x26\x14\x99\x09\xae\x37\xa1\xea\x4d\x18\x1b\x13\x32\x67\x42\xe5\x4c\x28\x5a\x13\xaa\xd2\x84\x9e\x75\xce\x84\x61\x30\xa1\xaf\x4c\xf0\xa5\x09\xce\x99\x30\x61\xa3\x34\x61\x9a\xe4\xaf\x1d\x4c\xb0\x3c\xcb\x4c\xe8\x47\x79\x7f\xca\xc4\xef\xc9\x4b\x0c\x63\x6e\x82\x1f\x4d\x98\x88\xb7\x31\xa1\x18\x4d\x28\x7a\x13\xea\xd6\x84\x2c\x37\xa1\xa8\x4c\x68\x1a\x13\x3a\xdd\xc7\xf7\x26\xe4\x93\x09\x63\x66\xc2\xc0\xf3\xdc\x84\x11\xbb\xa3\x09\x99\x35\x61\xe8\x25\x3f\xf8\x5b\x15\x62\xaf\x6d\x4c\x68\x46\xf9\x4e\x5e\x59\x13\xe3\x2f\x24\xc6\x0c\x9f\x9d\xf8\xdd\xe4\x92\xbf\xbc\x17\x1b\x5d\x6d\x42\xcf\xfa\x5a\xf6\xac\x2a\xc9\xa5\xed\x4c\x28\x4a\x13\x4a\x7c\x9a\x4c\x98\xf0\xab\x16\x7b\x9d\x93\x73\x60\x9d\xed\x4d\xe8\x07\xd9\x2b\xe6\xa6\x92\xb8\xd8\xab\x6e\x24\xfe\xbc\x33\xc1\x5b\x13\xf2\xd1\x04\x97\xcb\x7b\x23\xbe\x75\x26\xd8\x56\xea\xc1\x65\xc7\xf8\x86\xc2\x84\x72\x94\x9c\xf4\xce\x84\xa6\x30\xc1\x75\x26\xd4\x9a\x07\x9f\x8b\x1f\xcd\x24\x75\x50\xf7\x26\xb4\xa3\x09\x75\x61\x42\xee\xe4\x3c\x38\xdf\x78\xe6\x9d\x09\xad\x97\xdc\x53\x6f\x9c\x13\x75\x63\xbd\xda\xb0\x26\xb4\xc4\xd8\x8a\xcf\x6d\x25\x76\x47\xfc\x2a\xa4\x56\xf2\xca\x84\x9c\x9a\xd0\xfa\x8b\xfb\x10\x73\x26\xf9\x89\x35\x84\x3d\x2b\x9f\x3d\xfb\xd7\x26\x34\xa5\xf8\x5d\x68\xbd\xbb\x41\x7c\xa5\xb6\xd8\xa3\xad\xe5\x5d\xf6\x2a\x1a\x39\xa7\xc1\x4a\xec\x25\x39\x73\x62\x8f\xef\x4d\x2f\xef\x4f\xa5\x09\x5d\xa1\xf5\xde\xcb\x67\xce\x9b\xbd\xc9\x2b\xef\x56\x93\x09\x76\x92\x5a\x24\x46\x6c\x17\x93\xd4\x4a\xd9\x48\xae\x4f\xcf\x95\x77\x5d\x2b\x39\xa4\x66\xa9\xc7\x91\x1c\x50\x13\xbd\xd4\x2f\xf1\xf6\xa5\x09\xd9\x20\x3e\x91\x3f\xfa\x8d\x5a\xe2\x2f\xef\x94\x5e\xce\x97\x7a\x75\xf4\x88\x97\xfa\xa2\x1f\xa9\x09\x72\xc4\xd9\x4d\xe4\x36\x37\xa1\x6c\x4d\xe8\x3b\xf1\x9d\x7c\x11\xbf\x2f\xa4\xa6\xe2\xdf\x49\x6a\x8c\x5e\x99\x3a\xb1\xed\xc1\x87\x42\x7b\x6b\x30\xa1\xe5\x3c\x46\xed\xc9\x5a\xce\x9f\x77\xa9\xe7\x5c\xe3\xc2\x37\xec\xd5\xce\x04\x5b\x8a\x3d\x6a\x72\x98\xa4\x77\x88\x95\xdf\x2b\xde\x6b\x04\x83\xf0\xb3\x9c\xa4\x36\x38\xc3\xde\xcb\x79\x50\x4f\xd4\x03\x3e\xd2\xe3\xd8\x73\xa5\xfc\x5e\x4f\xd2\x53\x96\x9a\x72\x52\x4b\x6d\x2f\xbd\x4f\xdd\x14\xd4\x87\xf6\x38\x3e\x15\xc3\x11\xff\xbc\xe2\x45\xac\xf1\xd6\x84\xa6\x93\xfc\x11\x2b\x79\x91\xf7\xce\x0e\xd2\xe7\x11\xb8\x2a\x23\x3f\xa7\x74\x0e\xbc\x7d\xa2\x94\x92\xc5\xe2\x31\x36\x9f\x27\x8b\xc5\xd9\x13\x4d\x79\x76\x9e\x2c\x56\x0f\xec\xf9\xe8\x75\x36\xfa\x4b\x7c\x72\xba\x51\x24\xfc\x07\x55\xf5\x9c\x7b\xbf\x27\x5a\x1e\xb4\x46\x54\x0b\x57\xaf\x9e\x32\xcf\x3b\x38\xf9\x2a\xfd\xd0\xd3\x14\xc6\xbd\x4a\xdb\x36\x3b\x4f\xe1\xce\xab\x53\x6a\x5d\x56\x45\xb6\x8a\xcf\x61\xc4\x2b\x61\xcc\x7f\xae\xe7\xb0\xcc\xab\x2e\xab\x9a\xb2\x2f\xba\xf3\x34\x5b\xbd\x4f\x16\x96\x4d\x3f\x8b\xe6\xdf\xc5\x70\xae\x52\x8d\x0a\x8f\xae\xe2\xbf\xef\x1f\x52\x6a\xcf\x9f\x61\xbb\xaf\xa3\xfe\x7e\x31\xe1\x51\xc8\xa3\x92\x06\xc0\x04\x00\x02\x32\x79\x26\x00\x46\xe3\x42\x32\x95\x37\xa1\xcc\x4d\x70\x95\x82\x49\x2f\x8d\x09\xa8\x0c\x80\x49\x6d\x82\x6b\x04\x00\xba\x56\x0a\x98\xe6\xe8\x46\x69\x6e\x00\xd6\x52\xe8\x00\x68\x2f\x24\x04\xd8\x43\x0e\x34\x26\x85\x4d\x73\x40\x02\x34\x59\xe1\x4c\x70\xa3\xf8\xe7\x14\xe0\x20\x2b\x80\x95\xcf\x00\x1c\xfb\xc7\xa6\x2a\xe4\xfd\xe8\x73\x27\xc0\x81\xed\xba\x14\x40\x05\x9c\xf1\x19\x32\x21\xee\x0e\x00\xb4\x42\xe4\x2d\xc0\x5a\x0a\x09\xd3\x48\x3c\x2b\x94\x38\xd9\x17\xe2\x6c\x15\x68\x4b\xf2\xd7\x4a\x9e\x20\xbf\x28\x0a\x46\x01\x9c\x68\x67\x94\x26\x8d\x44\x50\x8a\x08\x20\x6f\xe4\x17\x7f\x1b\x25\x01\xc8\x00\xe2\x8f\xe4\x9b\x0b\x81\x79\xcd\x93\xcd\x4d\xe8\x6b\x25\x23\x2b\x24\x56\x67\x02\xa8\x5e\x01\x1c\x60\x63\x4f\xce\x89\x3c\x12\x7f\xdb\x0a\xb1\x21\x1e\x10\x0d\x9c\x13\xb1\x03\xa0\xf8\xc3\x99\xb7\xb9\x8a\x00\x3d\x63\xce\x03\x50\xe6\x39\x31\x03\x20\x08\x98\x4e\x41\x15\xdf\x0f\x24\x48\xfe\xa2\x70\xb0\x72\x46\x11\x18\x33\x01\x3f\x48\x6a\x50\x50\xe2\x3c\x11\x2e\x80\x1c\x64\x08\x21\xf7\x2a\x56\xc6\x4e\x80\xbb\xee\xc4\x5f\x80\x0e\x02\x26\x36\x40\x17\x60\xa5\x66\xc8\x8f\xaf\xe4\x3c\xa8\x2f\x88\xd2\x69\x6d\x1c\xc4\x18\x22\x8b\x7c\xf3\x1e\x3e\x60\xab\x51\x71\x51\xd5\x72\xe6\xec\x43\x1f\xc4\xba\x9e\x84\xd8\xa9\xd5\x4a\x7d\x84\xf8\x78\xd7\xaa\x9f\x9c\x21\xb9\x23\xff\x88\x40\xc0\xb5\x44\x10\xe8\xfe\x90\x09\xe7\xd2\x5a\xf9\x0d\x82\xa3\x06\x39\x1f\xf2\x79\xa8\x33\x7f\x20\x9f\x27\x40\x8b\x8f\xf4\x10\xff\xd1\x9b\xc4\x77\x7c\xef\x09\xd0\x1e\xfb\xfa\xa5\x58\x7b\xb4\x70\x0a\xb7\x27\xf3\xfa\x73\x88\x7b\x5c\xf4\xc7\x41\xf7\x03\x57\x3f\x32\xee\x3e\x72\x59\xa1\xb7\x2c\xab\x3f\x1d\x7a\xbf\x89\x03\xfc\x8b\xa1\xf7\xa0\x7b\xd1\x4e\x40\x04\xa5\x57\xa9\xf6\xa3\x8c\x29\x7b\x5a\x1e\xd8\x82\x9f\xd1\x4d\xcc\x09\x94\x30\x90\x45\xf9\x01\x9d\x68\xd5\x49\xdb\xe8\x30\x7b\x00\x6f\x91\xc7\x55\xf3\xa2\x7d\x29\xef\x52\xb5\x67\x84\x04\x5a\x12\x18\x03\x36\x7a\x13\xca\x41\xf6\x6a\x06\xd1\x7c\x51\x97\x39\x81\xcb\x08\xe7\x83\xb4\x0c\x7a\x19\x7f\x4b\xd5\xe1\xc0\x18\x2d\x99\x29\xe4\x95\xaa\xdd\x80\x11\xf4\x3d\x2d\x44\x9b\x47\xdd\x9f\x0b\xd5\xa0\x35\x81\x3b\x34\x18\x36\xb0\xd7\x2b\xcd\x40\x1f\xec\x0f\x84\x90\xb7\x52\xa1\x17\x18\x02\x7e\x59\x13\x75\x5e\x29\xf3\x07\x33\x5a\x9c\x2d\x32\x89\x03\x4d\x05\x24\x1e\xda\xbf\xe0\xb3\x15\x9f\x98\x51\x98\xed\x62\xdb\x7b\xc9\x0b\x5a\xac\x57\xcd\x06\x35\x01\x3f\x59\x2d\x7e\xc4\xd9\x23\x13\x88\xc6\x4e\x7e\xa0\x31\x2b\x50\xec\x54\x57\x31\x8b\xa0\xbd\x89\x97\x3d\x89\xb3\xac\x45\xbf\x71\x06\xf1\x9c\x54\xdf\x92\x23\x8f\xcf\x8d\x6a\xe5\x52\xb5\x78\x23\xb1\xc6\x19\xa2\x97\x73\x2d\x75\x06\x88\xf0\x3c\x09\xac\x4f\xea\x27\x94\xc9\x5c\x80\xb6\x1b\x46\xc9\x55\x01\xc4\xeb\xec\x8a\x1d\xa0\x0a\xfa\x6a\x2a\x81\xd7\x07\xcd\x9c\x49\x0e\xd0\xa7\xd8\x84\x2a\xa1\x50\xec\xf2\x8c\x99\x01\x88\xec\x54\x1e\x40\xef\xb9\xea\xec\x43\x4d\xf3\x1b\xe7\x85\xf6\xad\x1a\xa1\x1a\xe8\x2a\xce\xc6\xb9\xc4\x47\xbc\x8d\x6a\xe1\x38\x63\x75\x02\xc3\xac\x9d\x94\x5a\xa1\x04\x66\x0a\x66\x15\x68\xc1\x59\x99\x73\x79\x3e\x38\xa9\x0b\xf4\x3c\xb1\x3c\xcc\x0e\x8d\xbc\x03\x0c\x53\x17\xc4\x1f\x25\x84\x9e\x39\xfb\x51\x3f\xbd\x52\x39\xeb\x91\x13\x07\xad\xdc\x4f\x42\x1f\xf8\x87\x56\x8e\xb3\xcb\xa0\x73\x61\x27\x50\x1f\xf7\xf4\x32\x2f\xd0\x87\xd0\x48\xa4\xea\x42\xa9\x56\xf5\x36\xb5\xdf\xe8\x5f\x7a\x9a\x33\xa0\x4f\xa7\x46\x66\x07\xf2\xc1\xd9\x60\xbb\xd5\x59\x90\xba\xad\xa0\x6c\x7c\x70\x22\x2f\xa8\x95\x5a\xcf\x82\x99\x09\x9a\xa2\x4e\x98\x07\xf1\x2f\xfe\xb5\xe2\x0f\x7b\x95\x4e\xec\x3a\xa5\x15\xf2\xcb\x5c\xc7\xb9\x51\x4f\xcc\xdf\xd4\xf1\xa1\x37\xc1\x06\xe8\x1f\xaa\x62\x9e\x8e\x33\x6a\xf9\xcc\x3c\xd0\xeb\x0c\xd3\x6b\xdd\xd8\xdf\xa0\xa9\x23\x06\xbe\x94\xa6\x8e\x16\x4e\x69\xea\xe4\x02\xf9\x39\x9a\x3a\x2e\xfa\xe3\x34\xf5\x81\xab\x1f\x99\xa6\x1e\xb9\x7c\xa0\xa9\xb6\xfb\xd3\x69\xea\xf5\x7a\x72\xe1\xc5\x2c\xd5\x6b\x45\xc2\x52\x08\xd8\xe9\x64\x40\x40\xb0\x83\xfe\x07\xc1\x7c\x10\xf1\x20\x08\x55\x03\xca\x80\x2e\x88\x3a\x2a\x3b\xb2\x54\x21\x82\x93\xea\x86\x99\x10\x91\x30\x10\x6c\xd0\xea\xad\xc4\xa8\xb7\x70\x20\x2a\x5d\x02\xb2\x20\xc4\x0b\x45\x2d\xaf\x28\x1d\x99\xae\x17\xe1\x3a\x54\xc2\x50\x74\x1f\x82\x0e\x44\x8f\x82\x53\x45\x36\xdd\x8a\xd8\x8d\x37\x78\xbd\xde\x0e\x69\xac\x20\x09\x5d\x95\x2b\x7b\xc0\x8a\xf8\x10\x3b\x44\x85\x3e\x53\x34\x0c\x09\x1b\x80\x4a\x99\x32\x11\x6c\x50\xa9\x38\x8d\xc2\xb4\x91\x58\x10\xcb\xf1\x96\xab\x14\x94\x81\xb5\x61\xbe\x42\x6f\xac\x46\x65\x2e\xba\x9f\xb8\x40\xcc\xc8\x76\x4e\x7e\x23\x8e\x46\x6f\x2e\x10\x9f\x95\x0e\x1a\x88\x4d\xab\x6c\x12\x59\xb2\x14\x56\xec\x74\x08\x00\x09\x22\xeb\xaa\x3a\xc0\x2f\x90\x1f\x84\x01\x0d\x7c\xa3\xec\x56\x0b\x6a\x12\x17\xe7\x04\x92\xc2\x90\x20\x79\x6e\xc5\xe7\xc8\x38\x3a\x20\xa1\x1e\x32\x27\xf1\xc1\x9c\x13\xef\xb7\xe2\x27\x48\x6f\x35\x56\xd8\x80\x21\x68\xd4\xf8\x47\x55\x1a\x51\xb0\xe7\x3a\xc8\xe8\xa0\x80\x52\x98\xf4\xc6\xae\x54\x14\x06\x75\xc7\x46\x6e\x37\xf8\x0b\xba\x93\x9f\x98\xc7\x52\xf2\xd1\xeb\x90\x00\xb2\x5a\x55\x4d\xc4\x59\xea\x6f\xa0\x73\xcc\xd7\x20\xb5\xc2\x59\xa1\xaa\x60\x16\x18\x90\xfa\x24\x47\x9d\xb2\x7c\xbc\x65\xad\x84\xfd\x58\x1f\xd1\x7a\xd4\x1b\x13\x45\x70\x98\x1e\xf5\x83\x2a\xc3\xa7\xc8\x94\xbd\xf4\xc8\xa0\x68\x09\x82\x13\xe7\xa0\x83\x32\x48\x4c\x1d\x93\x73\x3e\xa3\x84\xea\x5a\xfa\x04\xf5\x82\x1a\x89\x37\x6e\xbd\xde\xe8\xf6\x5a\xc7\x4e\x18\xa4\xd5\x9a\x82\x91\x88\x33\xda\xf7\x52\xd7\x83\xde\xfe\x60\x2b\x9e\x61\xa3\x83\x73\x79\xac\x57\xab\x35\x40\xef\xc4\x21\xbc\x91\x78\x73\x1d\x7c\xb2\x49\xfc\x85\xb5\xd8\x17\x45\x43\xdd\x46\x05\x32\x4a\xbf\xc4\x1b\x24\x1d\x7c\x38\x23\x62\xc8\xf5\x16\x9a\xe1\x2b\x32\x7e\x23\xf5\x7b\xc0\x02\xd8\xeb\xe0\xc3\xa0\xb7\x65\xad\xb2\xa3\xd3\x1b\xdd\x29\x13\xe5\x05\xd3\x80\x09\xf8\x52\x28\xbb\x51\xef\x30\x74\xbc\x1d\xd5\xdb\x55\x6a\x7b\xd2\x5b\x3e\x30\x81\x81\x33\xaa\x30\x2b\x6a\x17\x5f\x22\x76\x28\x1b\xc7\xdb\xde\x5a\xd4\x5e\x73\x60\xaf\xf6\x78\x3b\x87\x0a\xaa\xf5\x66\x38\xd7\x41\x8e\x7d\x06\x3d\x0b\x70\x81\x78\x59\x93\xe9\x39\x0d\x7a\xe3\xd7\x68\x9d\x71\x5e\xe4\x81\xa1\x2f\xde\xce\x8d\xaa\xb2\x9d\xd4\x3f\x39\x85\xb1\x07\x1d\x6c\xed\x41\x2d\xf9\x23\xc6\xc0\xde\xf1\x56\x6f\x12\x5c\xb4\xaa\x52\x61\x6a\xab\x0a\x8f\x9e\xa0\x2f\xa9\x07\xfa\x9b\xdc\x79\xbd\xa9\x3e\xdc\xcc\x17\xda\x0f\xa5\xc6\x13\x6f\x30\x5b\xc1\xa6\x42\x95\x7d\x1c\x4e\x5b\xc5\x49\xad\x81\x4e\x15\x18\xbd\xde\xe8\xf0\x9a\x3f\x73\x4b\x88\x1d\xec\xe1\x03\x75\x9f\x77\x72\x91\xf0\xac\x2a\x78\xa0\x9c\x97\x8a\x82\x07\x03\xa7\x9a\xe0\xf8\xbf\x8f\x9f\x93\x04\x0f\x4b\xfe\xb8\x22\x78\xea\xe6\x47\x16\x04\xa7\xfe\xaa\x1e\xc8\xb3\xea\xcf\x17\x04\xff\x9a\xdd\xff\x03\x00\x00\xff\xff\x8d\x86\xe8\xaf\x00\x20\x00\x00")

func assetsViewsGoBytes() ([]byte, error) {
	return bindataRead(
		_assetsViewsGo,
		"assets/views.go",
	)
}

func assetsViewsGo() (*asset, error) {
	bytes, err := assetsViewsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/views.go", size: 20480, mode: os.FileMode(420), modTime: time.Unix(1480496086, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/add.html": assetsAddHtml,
	"assets/footer.html": assetsFooterHtml,
	"assets/header.html": assetsHeaderHtml,
	"assets/index.html": assetsIndexHtml,
	"assets/view.html": assetsViewHtml,
	"assets/views.go": assetsViewsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"add.html": &bintree{assetsAddHtml, map[string]*bintree{}},
		"footer.html": &bintree{assetsFooterHtml, map[string]*bintree{}},
		"header.html": &bintree{assetsHeaderHtml, map[string]*bintree{}},
		"index.html": &bintree{assetsIndexHtml, map[string]*bintree{}},
		"view.html": &bintree{assetsViewHtml, map[string]*bintree{}},
		"views.go": &bintree{assetsViewsGo, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

